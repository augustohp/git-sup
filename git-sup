#!/usr/bin/env sh

set -e
set +o posix
test "${DEBUG:-0}" != "0" && set -x || set +x;

# Option flags and their default values
GITSUP_REPOSITORIES_DEPTH=2
GITSUP_CONFIG_SECTION=sup

# Usage: _error "Some warning"
_error () { echo "Error: $@" 1>&2; exit 2; }

# Usage: _tab <command 1> [command 2] ...
_tab () { $@ | sed "s/^/	/"; }

# Usage: _verbose "A message thay may not appear"
_verbose () { test "${VERBOSE:-0}" != "0" && return || echo $@; }

# Usage: _git [valid git command]
_git () { _verbose git $@; git $@; }

# Usage: _function_exists <name>
_function_exists () { declare -f $1 > /dev/null && echo $1 || echo ""; }

# Usage: _help <argument> <display help command to execute>
_help ()
{
	if [ "$1" == "--help" -o "$1" == "-h" ]
	then
		${@:2}
		exit 0
	else
		return 0
	fi
}

# Usage: _find_repositories <path> [depth]
_find_repositories ()
{
	local directory="${1:-}"
	local depth=${2:-$GITSUP_REPOSITORIES_DEPTH}
	directory=${directory%%/}

	if [ -d "${directory}/.git" ]
	then
		echo "${directory}"
		return 0
	fi

	for repo in $(find "${directory}" -name .git -depth ${depth} | sed 's#/\.git$##')
	do
		realpath "${repo}"
	done
}

# Usage: _repeat_commands_for_repositories <path> <command 1> [command 2] ...
_repeat_commands_for_repositories ()
{
	local path
	local cmd
	path=$1
	cmd=${@:2}

	for dir in $(_find_repositories $path)
	do
		_verbose "Stacking directory ${dir}"
		pushd "${dir}" > /dev/null
		$cmd
		popd > /dev/null
	done
}

# Usage: _conf_or <git config key> <default value if none is given>
_conf_or ()
{
	local output

	output=$(git config --get-all ${1:-GITSUP_CONFIG_SECTION} 2>/dev/null)
	if [ -z "${output}" ]
	then
		echo ${@:2} # everything but the first argument
	else
		echo ${output}
	fi
}

# Dispatching "copied" from [scrito](https://gist.github.com/alganet/9419469)
gitsup () ( - )

# Making minimum options available
gitsup_v () ( gitsup_version )
gitsup_version () ( echo "git-sup 1.0.0" 1>&2 )

gitsup_h () ( gitsup_help )
gitsup_help ()
{
	cat <<-HELP
	Usage: git-sup [options] <command> [command-options]
	       git sup fetch .
	       git sup fetch --help
	
	Allows one to query Git repositories about relevant information
	regarding their repositories.

	Options:
	  -v, --version  Displays the version of the tool.
	  -h, --help     Renders this message.
	
	Commands:
	  fetch <path>   Fetches updates from all remotes.

	Issues can be reported to augusto.hp [at] gmail [dot] com
	HELP
}

gitsup_fetch ()
{
	local cwd # current working directory
	cwd=${1:-.}

	_help "${cwd}" cat <<-HELP
	Usage: git-sup fetch <path>

	Will find every git repository in PATH and execute a "git fetch"
	command in then.
	HELP

	_repeat_commands_for_repositories "${cwd}" \
		echo $(pwd); \
		_tab _git fetch $(_conf_or sup.fetchargs "--all")
}


if [ ! -z $GITSUP_TEST_EXECUTION ]
then
	return 0
fi

tool=$1
tool=${tool##*-}
tool=${tool##*/}
if [ -z "${tool}" ]
then
	_error "Specify a command. Use 'git-sup --help'."
fi

shift
main_command_exists=$(_function_exists gitsup_${tool})
if [ -z "$main_command_exists" ]
then
	_error "Invalid command 'git sup ${tool}'. Use 'git-sup --help'."
fi

gitsup_${tool} $@
