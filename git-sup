#!/usr/bin/env sh

set -e
set +o posix
test "${DEBUG:-0}" != "0" && set -x || set +x;

# Option flags and their default values
GITSUP_REPOSITORIES_DEPTH=2
GITSUP_CONFIG_SECTION=sup
GITSUP_DAYS_TO_BE_ACTIVE=${GITSUP_DAYS_TO_BE_ACTIVE:=30}

# Usage: _error "Some warning"
_error () { echo "Error: $@" 1>&2; exit 2; }

# Usage: _tab <command 1> [command 2] ...
_tab () { $@ | sed "s/^/	/"; }

# Usage: _verbose "A message thay may not appear"
_verbose () { test "${VERBOSE:-0}" != "0" && return 0 || echo $@; }

# Usage: _function_exists <name>
_function_exists () { declare -f $1 > /dev/null && echo $1 || echo ""; }

# Usage: _help <argument> <display help command to execute>
_help ()
{
	if [ "$1" == "--help" -o "$1" == "-h" ]
	then
		${@:2}
		exit 0
	else
		return 0
	fi
}

# Usage: _find_repositories <path> [depth]
_find_repositories ()
{
	local directory="${1:-}"
	local depth=${2:-$GITSUP_REPOSITORIES_DEPTH}
	directory=${directory%%/}

	if [ -d "${directory}/.git" ]
	then
		echo "${directory}"
		return 0
	fi

	for repo in $(find "${directory}" -name .git -depth ${depth} | sed 's#/\.git$##')
	do
		realpath "${repo}"
	done
}

# Usage: _conf_or <git config key> <default value if none is given>
_conf_or ()
{
	local output

	output=$(git config --get-all ${1:-GITSUP_CONFIG_SECTION} 2>/dev/null)
	if [ -z "${output}" ]
	then
		echo ${@:2} # everything but the first argument
	else
		echo ${output}
	fi
}

# Dispatching "copied" from [scrito](https://gist.github.com/alganet/9419469)
gitsup () ( - )

# Making minimum options available
gitsup_v () ( gitsup_version )
gitsup_version () ( echo "git-sup 1.0.0" 1>&2 )

gitsup_h () ( gitsup_help )
gitsup_help ()
{
	cat <<-HELP
	Usage: git-sup [options] <command> [command-options]
	       git sup fetch .
	       git sup fetch --help
	
	Allows one to query Git repositories about relevant information
	regarding their repositories.

	Options:
	  -v, --version  Displays the version of the tool.
	  -h, --help     Renders this message.
	
	Commands:
	  fetch          Fetches updates from all remotes.
	  authors        Lists authors and commiters.
	  authors_active Authors who commited in a given time.
	  changelog      Display short commit messages.

	Issues can be reported to augusto.hp [at] gmail [dot] com
	HELP
}

gitsup_fetch ()
{
	local cwd # current working directory
	cwd=${1:-.}

	_help "${cwd}" cat <<-HELP
	Usage: git-sup fetch <path>

	Will find every git repository in PATH and execute a "git fetch"
	command in then.
	HELP

	for dir in $(_find_repositories $cwd)
	do
		_verbose "Stacking directory ${dir}"
		pushd "${dir}" > /dev/null
		_tab git fetch $(_conf_or sup.fetchargs "--all") 2> /dev/null
		popd > /dev/null
	done
}

gitsup_master_update ()
{
	local cwd # current working directory
	cwd=${1:-.}

	_help "${cwd}" cat <<-HELP
	Usage: git-sup pull <path>

	Stashes existing changes, fetches from origin remote, changes branch
	to master, (hard) resets to origin/master and goes back to previous branch.
	HELP

	for dir in $(_find_repositories $cwd)
	do
		_verbose "Stacking directory ${dir}"
		pushd "${dir}" > /dev/null
		_tab git fetch $(_conf_or sup.fetchargs "--all") 2> /dev/null
		popd > /dev/null
	done
}

gitsup_changelog ()
{
	local cwd # current working directory
	local branch
	cwd=${1:-.}
	branch=${2:-"master"}

	_help "${cwd}" cat <<-HELP
	Usage: git-sup changelog <path> [branch]

	Will output the short commit message of every Git repository found
	inside PATH for the last $GITSUP_DAYS_TO_BE_ACTIVE days.  Defaults to master branch.
	HELP

	for dir in $(_find_repositories $cwd)
	do
		_verbose "Stacking directory ${dir}"
		pushd "${dir}" > /dev/null
		echo $dir
		git checkout ${branch} > /dev/null 2> /dev/null
		_tab git log --no-merges --oneline --since "$GITSUP_DAYS_TO_BE_ACTIVE days ago" 2> /dev/null
		git checkout - 2> /dev/null > /dev/null
		popd > /dev/null
	done
}

gitsup_authors ()
{
	local cwd # where to execute the command into
	local log_args # git-log arguments supplied
	cwd=${1:-.}
	log_args=${@:2}

	_help "${cwd}" cat <<-HELP
	Usage: git-sup authors <path> [options]
	       git-sup authors ~/src/github.com/php/php-src

	Will output every author or commiter and their e-mail (respecting
	.mailmap file) for every Git repository found in PATH.

	An output line separated by tab contain the columns:
	  E-mail: Author or commiter e-mail's on Git
	  Name: Author or commiter name's on Git
	
	Options:
	  -N              Display only N commits.
	  --since <when>  Only commits after WHEN, e.g: 2 weeks ago.
	  --follow <file> Continues to look the file history through its
                      renames.
		
	Any OPTIONS accepted by git-log also works.
	HELP

	for dir in $(_find_repositories $cwd)
	do
		_verbose "Stacking directory ${dir}"
		pushd "${dir}" > /dev/null
		git log --format='%aE%x09%aN%n%cE%x09%cN' ${log_args} 2> /dev/null | sort | uniq
		popd > /dev/null
	done
}

gitsup_authors_active ()
{
	local cwd # where to execute the command into
	local log_args # git-log arguments supplied
	cwd=${1:-.}
	log_args=${@:2}

	_help "${cwd}" cat <<-HELP
	Usage: git-sup authors_active <path> [options]
	       git-sup authors_active ~/src/github.com/php/php-src

	Will output every author or commiter and their e-mail (respecting
	.mailmap file) for every Git repository found in PATH. Only commits
	of the last $GITSUP_DAYS_TO_BE_ACTIVE days are analysed.

	An output line separated by tab contain the columns:
	  E-mail: Author or commiter e-mail's on Git
	  Name: Author or commiter name's on Git
	HELP

	for dir in $(_find_repositories $cwd)
	do
		_verbose "Stacking directory ${dir}"
		pushd "${dir}" > /dev/null
		git log --format='%aE%x09%aN%n%cE%x09%cN' --since "${GITSUP_DAYS_TO_BE_ACTIVE} days ago" 2> /dev/null | sort | uniq
		popd > /dev/null
	done
}

if [ ! -z $GITSUP_TEST_EXECUTION ]
then
	return 0
fi

tool=$1
tool=${tool##*-}
tool=${tool##*/}
if [ -z "${tool}" ]
then
	_error "Specify a command. Use 'git-sup --help'."
fi

shift
main_command_exists=$(_function_exists gitsup_${tool})
if [ -z "$main_command_exists" ]
then
	_error "Invalid command 'git sup ${tool}'. Use 'git-sup --help'."
fi

gitsup_${tool} $@
