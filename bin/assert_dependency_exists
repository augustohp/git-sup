#!/usr/bin/env sh
# vim: ft=sh noet ts=4 sw=4:
#
# Ensures a given command exists to be used and is present
# on the execution. If not, displays an error.
# This is a very common pattern which can be done in a one
# lines, but to avoid inconsistencies and for the sake of
# documentation lets do this. I am a moron, I know.
#
# Author: Augusto Pascutti <augusto.hp@gmail.com>

APP_NAME=$(basename $0)
APP_VERSION="1.0.0"

set -e
test ! -z "$DEBUG" && { set -x; }

# Usage: display_help
display_help()
{
	cat <<-EOT
	Usage: $APP_NAME <command> [command 2] [command 3...]
	       $APP_NAME [-h | --help]
	       $APP_NAME [-v | --version]
	
	Will check if a program exists.

	Tell me how useless this is at augusto.hp@gmail.com.
	EOT
}

# Usage: dependency_exists <command>
dependency_exists()
{
	if [ -z "$1" ]
	then
		display_help
		echo "Error: You must provide a command so an assertion can be made."
		exit 2
	fi

	dependency_path=$(command -v "${1}")
	if [ -z "${dependency_path}" ]
	then
		# Dependency not found
		return 1
	fi

	return 0
}

while :;
do
	if [ $# = 0 ]
	then
		# No parameters given, run default
		break
	fi

	case $1 in
		-h|--help)
			display_help
			exit 0
			;;
		-v|--version)
			echo "$APP_NAME $APP_VERSION"
			exit 0
			;;
		*)
			break
			;;
	esac
	shift
done

for dependency in "$@"
do
	if ! dependency_exists "$dependency"
	then
		echo "Error: Dependency '${dependency}' not installed or available in \$PATH."
		exit 1
	fi
done
exit 0
